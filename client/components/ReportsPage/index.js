import React, { useEffect, useState } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { Icon, Menu, Tab } from 'semantic-ui-react'
import RawOodiReports from 'Components/ReportsPage/OodiReports/RawOodiReports'
import OodiReports from 'Components/ReportsPage/OodiReports/OodiReports'
import SisReports from 'Components/ReportsPage/SisReports'
import EnrolmentLimbo from 'Components/ReportsPage/EnrolmentLimbo'
import {
  getAllOodiReportsAction,
  getUsersOodiReportsAction
} from 'Utilities/redux/oodiReportsReducer'


export default () => {
  const [activeTab, setActiveTab] = useState(0)
  const [initialLoad, setInitialLoad] = useState(true)
  const dispatch = useDispatch()
  const user = useSelector((state) => state.user.data)
  const reports = useSelector((state) => state.oodiReports)
  const { mooc } = useSelector((state) => state.sisReports)

  useEffect(() => {
    if (!user.adminMode)
      dispatch(getUsersOodiReportsAction(user.id))
  }, [user])

  useEffect(() => {
    // If batch in url is a mooc report, switch
    // to correct tab, only once
    if (mooc && initialLoad) {
      setActiveTab(1)
      setInitialLoad(false)
    }
  }, [mooc, initialLoad])

  const handleTabChange = (_, { activeIndex }) => {
    // Fetch old reports only if tab is opened
    setActiveTab(activeIndex)
    if (user.adminMode && activeIndex > 2 && !reports.data.length)
      dispatch(getAllOodiReportsAction())
  }

  let panes = [
    {
      menuItem: (
        <Menu.Item key="manual" data-cy="sis-reports-tab">
          SIS Reports
        </Menu.Item>
      ),
      render: () => (
        <Tab.Pane>
          <SisReports />
        </Tab.Pane>
      )
    }
  ]

  if (!user.adminMode) {
    panes = [
      ...panes,
      {
        menuItem: (
          <Menu.Item key="pretty" data-cy="pretty-oodi-reports-tab">
            <Icon name="tasks" />
            OODI Reports
          </Menu.Item>
        ),
        render: () => (
          <Tab.Pane>
            <OodiReports />
          </Tab.Pane>
        )
      }
    ]
  }

  if (user.adminMode) {
    panes = [...panes, {
      menuItem: (
        <Menu.Item key="mooc" data-cy="sis-auto-reports-tab">
          SIS Autogenerated Reports
        </Menu.Item>
      ),
      render: () => (
        <Tab.Pane>
          <SisReports mooc />
        </Tab.Pane>
      )
    },
    {
      menuItem: (
        <Menu.Item key="limbo" data-cy="sis-limbo">
          <Icon name="sync" />
          Enrolment limbo
        </Menu.Item>
      ),
      render: () => (
        <Tab.Pane>
          <EnrolmentLimbo />
        </Tab.Pane>
      )
    },
    {
      menuItem: (
        <Menu.Item key="pretty" data-cy="pretty-oodi-reports-tab">
          <Icon name="tasks" />
          Pretty (OODI)
        </Menu.Item>
      ),
      render: () => (
        <Tab.Pane>
          <OodiReports />
        </Tab.Pane>
      )
    },
    {
      menuItem: (
        <Menu.Item key="raw" data-cy="raw-oodi-reports-tab">
          <Icon name="file alternate outline" />
          Raw (OODI)
        </Menu.Item>
      ),
      render: () => (
        <Tab.Pane>
          <RawOodiReports
            reports={{
              ...reports,
              data: reports.data.filter((report) => report.reporterId)
            }}
          />
        </Tab.Pane>
      )
    },
    {
      menuItem: (
        <Menu.Item key="mooc-old" data-cy="oodi-mooc-reports-tab">
          <Icon name="file alternate outline" />
          Autogenerated MOOC (OODI)
        </Menu.Item>
      ),
      render: () => (
        <Tab.Pane>
          <RawOodiReports
            reports={{
              ...reports,
              data: reports.data.filter((report) => !report.reporterId)
            }}
          />
        </Tab.Pane>
      )
    }
    ]
  }

  return <Tab panes={panes} onTabChange={handleTabChange} activeIndex={activeTab} />
}
